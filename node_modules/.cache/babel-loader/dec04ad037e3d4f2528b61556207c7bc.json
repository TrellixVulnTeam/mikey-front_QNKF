{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, LOGOUT } from './types';\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== 'token_not_valid') {}\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Michael/Documents/programming/React/fresherstrip/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","checkAuthenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","data","code","err","type","load_user","get","payload","login","email","password","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport{\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    LOGOUT\r\n} from './types';\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    if(localStorage.getItem('access')){\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({ token: localStorage.getItem('access') })\r\n\r\n        try{\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\r\n            \r\n            if(res.data.code !== 'token_not_valid'){\r\n\r\n            }\r\n        }catch(err){\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL\r\n            });\r\n        }\r\n\r\n    } else {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n}\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')){\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try{\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\r\n            \r\n            dispatch({\r\n                type: USER_LOADED_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        }catch(err){\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n    }\r\n    else{\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password});\r\n\r\n    try{\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n        \r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        \r\n        dispatch(load_user());\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}