{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, LOGOUT // USER_LOADED_SUCCESS,\n// USER_LOADED_FAIL,\n// AUTHENTICATED_SUCCESS,\n// AUTHENTICATED_FAIL,\n// PASSWORD_RESET_FAIL,\n// PASSWORD_RESET_SUCCESS,\n// PASSWORD_RESET_CONFIRM_FAIL,\n// PASSWORD_RESET_CONFIRM_SUCCESS,\n// ACTIVATION_SUCCESS,\n// ACTIVATION_FAIL,\n} from './types';\nimport { setAlert } from './alert'; // export const checkAuthenticated = () => async dispatch => {\n//     if(localStorage.getItem('access')){\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Accept': 'application/json'\n//             }\n//         };\n//         const body = JSON.stringify({ token: localStorage.getItem('access') })\n//         try{\n//             const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n//             if(res.data.code !== 'token_not_valid'){\n//                 dispatch({\n//                     type: AUTHENTICATED_SUCCESS\n//                 });\n//             } else {\n//                 dispatch({\n//                     type: AUTHENTICATED_FAIL\n//                 });\n//             }\n//         }catch(err){\n//             dispatch({\n//                 type: AUTHENTICATED_FAIL\n//             });\n//         }\n//     } else {\n//         dispatch({\n//             type: AUTHENTICATED_FAIL\n//         });\n//     }\n// }\n// export const load_user = () => async dispatch => {\n//     if (localStorage.getItem('access')){\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': `JWT ${localStorage.getItem('access')}`,\n//                 'Accept': 'application/json'\n//             }\n//         };\n//         try{\n//             const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n//             dispatch({\n//                 type: USER_LOADED_SUCCESS,\n//                 payload: res.data\n//             });\n//         }catch(err){\n//             dispatch({\n//                 type: USER_LOADED_FAIL\n//             });\n//         }\n//     }\n//     else{\n//         dispatch({\n//             type: USER_LOADED_FAIL\n//         });\n//     }\n// };\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:8000/api/token/', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    }); // dispatch(load_user());\n\n    dispatch(setAlert(\"Authenticated successfully\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(setAlert(\"Error Authenticating\", \"error\"));\n  }\n};\nexport const signup = (name, email, password, password2) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post('http://localhost:8000/api/accounts/signup', body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n    dispatch(login(email, password));\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n    dispatch(setAlert(\"Error Authenticating\", \"error\"));\n  }\n}; // export const verify = (uid, token) => async dispatch => {\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     const body = JSON.stringify({ uid, token });\n//     try{\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n//         dispatch({\n//             type: ACTIVATION_SUCCESS,\n//         });    \n//     }\n//     catch(err){\n//         dispatch({\n//             type: ACTIVATION_FAIL\n//         });\n//     }\n// };\n// export const reset_password = (email) => async dispatch => {\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     const body = JSON.stringify({ email })\n//     try {\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n//         dispatch({\n//             type: PASSWORD_RESET_SUCCESS\n//         })\n//     }catch(err){\n//         dispatch({\n//             type: PASSWORD_RESET_FAIL\n//         });\n//     }\n// }\n// export const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     const body = JSON.stringify({ uid, token, new_password, re_new_password });\n//     try {\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n//         dispatch({\n//             type: PASSWORD_RESET_CONFIRM_SUCCESS\n//         })\n//     }catch(err){\n//         dispatch({\n//             type: PASSWORD_RESET_CONFIRM_FAIL\n//         });\n//     }\n// }\n\nexport const logout = () => dispatch => {\n  dispatch(setAlert(\"logout successful\", \"success\"));\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Michael/Documents/programming/React/fresherstrip/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGOUT","setAlert","login","email","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","signup","name","password2","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport{\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    LOGOUT\r\n    // USER_LOADED_SUCCESS,\r\n    // USER_LOADED_FAIL,\r\n    // AUTHENTICATED_SUCCESS,\r\n    // AUTHENTICATED_FAIL,\r\n    // PASSWORD_RESET_FAIL,\r\n    // PASSWORD_RESET_SUCCESS,\r\n    // PASSWORD_RESET_CONFIRM_FAIL,\r\n    // PASSWORD_RESET_CONFIRM_SUCCESS,\r\n     // ACTIVATION_SUCCESS,\r\n    // ACTIVATION_FAIL,\r\n} from './types';\r\nimport { setAlert } from './alert';\r\n\r\n// export const checkAuthenticated = () => async dispatch => {\r\n//     if(localStorage.getItem('access')){\r\n//         const config = {\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//                 'Accept': 'application/json'\r\n//             }\r\n//         };\r\n\r\n//         const body = JSON.stringify({ token: localStorage.getItem('access') })\r\n\r\n//         try{\r\n//             const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\r\n\r\n//             if(res.data.code !== 'token_not_valid'){\r\n//                 dispatch({\r\n//                     type: AUTHENTICATED_SUCCESS\r\n//                 });\r\n          \r\n            \r\n//             } else {\r\n//                 dispatch({\r\n//                     type: AUTHENTICATED_FAIL\r\n//                 });\r\n//             }\r\n\r\n//         }catch(err){\r\n//             dispatch({\r\n//                 type: AUTHENTICATED_FAIL\r\n//             });\r\n\r\n//         }\r\n\r\n//     } else {\r\n//         dispatch({\r\n//             type: AUTHENTICATED_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\n// export const load_user = () => async dispatch => {\r\n//     if (localStorage.getItem('access')){\r\n//         const config = {\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//                 'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n//                 'Accept': 'application/json'\r\n//             }\r\n//         };\r\n\r\n//         try{\r\n//             const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\r\n            \r\n//             dispatch({\r\n//                 type: USER_LOADED_SUCCESS,\r\n//                 payload: res.data\r\n//             });\r\n//         }catch(err){\r\n//             dispatch({\r\n//                 type: USER_LOADED_FAIL\r\n//             });\r\n//         }\r\n//     }\r\n//     else{\r\n//         dispatch({\r\n//             type: USER_LOADED_FAIL\r\n//         });\r\n//     }\r\n// };\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password});\r\n\r\n    try{\r\n        const res = await axios.post('http://localhost:8000/api/token/', body, config);\r\n        \r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        \r\n        // dispatch(load_user());\r\n        dispatch(setAlert(\"Authenticated successfully\", \"success\"));\r\n\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n\r\n        dispatch(setAlert(\"Error Authenticating\", \"error\"));\r\n    }\r\n};\r\n\r\nexport const signup = (name, email, password, password2) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ name, email, password, password2});\r\n\r\n    try{\r\n        const res = await axios.post('http://localhost:8000/api/accounts/signup', body, config);\r\n        \r\n        dispatch({\r\n            type: SIGNUP_SUCCESS,\r\n            payload: res.data\r\n        });    \r\n\r\n        dispatch(login(email, password));\r\n\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n        dispatch(setAlert(\"Error Authenticating\", \"error\"));\r\n    }\r\n};\r\n\r\n// export const verify = (uid, token) => async dispatch => {\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     };\r\n\r\n//     const body = JSON.stringify({ uid, token });\r\n\r\n//     try{\r\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\r\n        \r\n//         dispatch({\r\n//             type: ACTIVATION_SUCCESS,\r\n//         });    \r\n//     }\r\n//     catch(err){\r\n//         dispatch({\r\n//             type: ACTIVATION_FAIL\r\n//         });\r\n//     }\r\n// };\r\n\r\n// export const reset_password = (email) => async dispatch => {\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     };\r\n\r\n//     const body = JSON.stringify({ email })\r\n\r\n//     try {\r\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_SUCCESS\r\n//         })\r\n//     }catch(err){\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\n// export const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     };\r\n\r\n//     const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n//     try {\r\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_CONFIRM_SUCCESS\r\n//         })\r\n//     }catch(err){\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_CONFIRM_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch(setAlert(\"logout successful\", \"success\"));\r\n\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}