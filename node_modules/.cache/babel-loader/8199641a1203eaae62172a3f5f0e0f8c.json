{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Michael/Documents/programming/React/fresherstrip/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Michael/Documents/programming/React/fresherstrip/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import{LOGIN_SUCCESS,LOGIN_FAIL,SIGNUP_SUCCESS,SIGNUP_FAIL,LOGOUT// USER_LOADED_SUCCESS,\n// USER_LOADED_FAIL,\n// AUTHENTICATED_SUCCESS,\n// AUTHENTICATED_FAIL,\n// PASSWORD_RESET_FAIL,\n// PASSWORD_RESET_SUCCESS,\n// PASSWORD_RESET_CONFIRM_FAIL,\n// PASSWORD_RESET_CONFIRM_SUCCESS,\n// ACTIVATION_SUCCESS,\n// ACTIVATION_FAIL,\n}from'./types';import{setAlert}from'./alert';// export const checkAuthenticated = () => async dispatch => {\n//     if(localStorage.getItem('access')){\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Accept': 'application/json'\n//             }\n//         };\n//         const body = JSON.stringify({ token: localStorage.getItem('access') })\n//         try{\n//             const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n//             if(res.data.code !== 'token_not_valid'){\n//                 dispatch({\n//                     type: AUTHENTICATED_SUCCESS\n//                 });\n//             } else {\n//                 dispatch({\n//                     type: AUTHENTICATED_FAIL\n//                 });\n//             }\n//         }catch(err){\n//             dispatch({\n//                 type: AUTHENTICATED_FAIL\n//             });\n//         }\n//     } else {\n//         dispatch({\n//             type: AUTHENTICATED_FAIL\n//         });\n//     }\n// }\n// export const load_user = () => async dispatch => {\n//     if (localStorage.getItem('access')){\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': `JWT ${localStorage.getItem('access')}`,\n//                 'Accept': 'application/json'\n//             }\n//         };\n//         try{\n//             const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n//             dispatch({\n//                 type: USER_LOADED_SUCCESS,\n//                 payload: res.data\n//             });\n//         }catch(err){\n//             dispatch({\n//                 type: USER_LOADED_FAIL\n//             });\n//         }\n//     }\n//     else{\n//         dispatch({\n//             type: USER_LOADED_FAIL\n//         });\n//     }\n// };\nexport var login=function login(email,password){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var config,body,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config={headers:{'Content-Type':'application/json'}};body=JSON.stringify({email:email,password:password});_context.prev=2;_context.next=5;return axios.post('http://localhost:8000/api/token/',body,config);case 5:res=_context.sent;dispatch({type:LOGIN_SUCCESS,payload:res.data});// dispatch(load_user());\ndispatch(setAlert(\"Authenticated successfully\",\"success\"));_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](2);dispatch({type:LOGIN_FAIL});dispatch(setAlert(\"Error Authenticating\",\"error\"));case 14:case\"end\":return _context.stop();}}},_callee,null,[[2,10]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var signup=function signup(name,email,password,password2){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var config,body,res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:config={headers:{'Content-Type':'application/json'}};body=JSON.stringify({name:name,email:email,password:password,password2:password2});_context2.prev=2;_context2.next=5;return axios.post('http://localhost:8000/api/accounts/signup',body,config);case 5:res=_context2.sent;dispatch({type:SIGNUP_SUCCESS,payload:res.data});dispatch(login(email,password));_context2.next=14;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](2);dispatch({type:SIGNUP_FAIL});dispatch(setAlert(\"Error Authenticating\",\"error\"));case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[2,10]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};// export const verify = (uid, token) => async dispatch => {\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     const body = JSON.stringify({ uid, token });\n//     try{\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n//         dispatch({\n//             type: ACTIVATION_SUCCESS,\n//         });    \n//     }\n//     catch(err){\n//         dispatch({\n//             type: ACTIVATION_FAIL\n//         });\n//     }\n// };\n// export const reset_password = (email) => async dispatch => {\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     const body = JSON.stringify({ email })\n//     try {\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n//         dispatch({\n//             type: PASSWORD_RESET_SUCCESS\n//         })\n//     }catch(err){\n//         dispatch({\n//             type: PASSWORD_RESET_FAIL\n//         });\n//     }\n// }\n// export const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n//     const config = {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n//     };\n//     const body = JSON.stringify({ uid, token, new_password, re_new_password });\n//     try {\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n//         dispatch({\n//             type: PASSWORD_RESET_CONFIRM_SUCCESS\n//         })\n//     }catch(err){\n//         dispatch({\n//             type: PASSWORD_RESET_CONFIRM_FAIL\n//         });\n//     }\n// }\nexport var logout=function logout(){return function(dispatch){dispatch(setAlert(\"logout successful\",\"success\"));dispatch({type:LOGOUT});};};","map":{"version":3,"sources":["C:/Users/Michael/Documents/programming/React/fresherstrip/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGOUT","setAlert","login","email","password","dispatch","config","headers","body","JSON","stringify","post","res","type","payload","data","signup","name","password2","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport{\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    LOGOUT\r\n    // USER_LOADED_SUCCESS,\r\n    // USER_LOADED_FAIL,\r\n    // AUTHENTICATED_SUCCESS,\r\n    // AUTHENTICATED_FAIL,\r\n    // PASSWORD_RESET_FAIL,\r\n    // PASSWORD_RESET_SUCCESS,\r\n    // PASSWORD_RESET_CONFIRM_FAIL,\r\n    // PASSWORD_RESET_CONFIRM_SUCCESS,\r\n     // ACTIVATION_SUCCESS,\r\n    // ACTIVATION_FAIL,\r\n} from './types';\r\nimport { setAlert } from './alert';\r\n\r\n// export const checkAuthenticated = () => async dispatch => {\r\n//     if(localStorage.getItem('access')){\r\n//         const config = {\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//                 'Accept': 'application/json'\r\n//             }\r\n//         };\r\n\r\n//         const body = JSON.stringify({ token: localStorage.getItem('access') })\r\n\r\n//         try{\r\n//             const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\r\n\r\n//             if(res.data.code !== 'token_not_valid'){\r\n//                 dispatch({\r\n//                     type: AUTHENTICATED_SUCCESS\r\n//                 });\r\n          \r\n            \r\n//             } else {\r\n//                 dispatch({\r\n//                     type: AUTHENTICATED_FAIL\r\n//                 });\r\n//             }\r\n\r\n//         }catch(err){\r\n//             dispatch({\r\n//                 type: AUTHENTICATED_FAIL\r\n//             });\r\n\r\n//         }\r\n\r\n//     } else {\r\n//         dispatch({\r\n//             type: AUTHENTICATED_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\n// export const load_user = () => async dispatch => {\r\n//     if (localStorage.getItem('access')){\r\n//         const config = {\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//                 'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n//                 'Accept': 'application/json'\r\n//             }\r\n//         };\r\n\r\n//         try{\r\n//             const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\r\n            \r\n//             dispatch({\r\n//                 type: USER_LOADED_SUCCESS,\r\n//                 payload: res.data\r\n//             });\r\n//         }catch(err){\r\n//             dispatch({\r\n//                 type: USER_LOADED_FAIL\r\n//             });\r\n//         }\r\n//     }\r\n//     else{\r\n//         dispatch({\r\n//             type: USER_LOADED_FAIL\r\n//         });\r\n//     }\r\n// };\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password});\r\n\r\n    try{\r\n        const res = await axios.post('http://localhost:8000/api/token/', body, config);\r\n        \r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n        \r\n        // dispatch(load_user());\r\n        dispatch(setAlert(\"Authenticated successfully\", \"success\"));\r\n\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n\r\n        dispatch(setAlert(\"Error Authenticating\", \"error\"));\r\n    }\r\n};\r\n\r\nexport const signup = (name, email, password, password2) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ name, email, password, password2});\r\n\r\n    try{\r\n        const res = await axios.post('http://localhost:8000/api/accounts/signup', body, config);\r\n        \r\n        dispatch({\r\n            type: SIGNUP_SUCCESS,\r\n            payload: res.data\r\n        });    \r\n\r\n        dispatch(login(email, password));\r\n\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n        dispatch(setAlert(\"Error Authenticating\", \"error\"));\r\n    }\r\n};\r\n\r\n// export const verify = (uid, token) => async dispatch => {\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     };\r\n\r\n//     const body = JSON.stringify({ uid, token });\r\n\r\n//     try{\r\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\r\n        \r\n//         dispatch({\r\n//             type: ACTIVATION_SUCCESS,\r\n//         });    \r\n//     }\r\n//     catch(err){\r\n//         dispatch({\r\n//             type: ACTIVATION_FAIL\r\n//         });\r\n//     }\r\n// };\r\n\r\n// export const reset_password = (email) => async dispatch => {\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     };\r\n\r\n//     const body = JSON.stringify({ email })\r\n\r\n//     try {\r\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_SUCCESS\r\n//         })\r\n//     }catch(err){\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\n// export const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n//     const config = {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     };\r\n\r\n//     const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n//     try {\r\n//         await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_CONFIRM_SUCCESS\r\n//         })\r\n//     }catch(err){\r\n//         dispatch({\r\n//             type: PASSWORD_RESET_CONFIRM_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch(setAlert(\"logout successful\", \"success\"));\r\n\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}